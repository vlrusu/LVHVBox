// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------- //
// combined //
// -------- //

#define combined_wrap_target 0
#define combined_wrap 7

static const uint16_t combined_program_instructions[] = {
            //     .wrap_target
    0xff31, //  0: set    x, 17           side 1 [15]
    0xff01, //  1: set    pins, 1         side 1 [15]
    0xef01, //  2: set    pins, 1         side 0 [15]
    0xef00, //  3: set    pins, 0         side 0 [15]
    0xef01, //  4: set    pins, 1         side 0 [15]
    0x401f, //  5: in     pins, 31        side 0
    0x0043, //  6: jmp    x--, 3          side 0
    0x1f00, //  7: jmp    0               side 1 [15]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program combined_program = {
    .instructions = combined_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config combined_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + combined_wrap_target, offset + combined_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

void combined_program_init_1(PIO pio, uint sm, uint offset, uint pin, float div) {
    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = combined_program_get_default_config(offset);
    // initialize voltage pins
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+15);
    pio_gpio_init(pio, pin+27);
    sm_config_set_sideset_pins(&c, pin+15);
    sm_config_set_set_pins(&c, pin+27, 1);
    // voltage in pins
    sm_config_set_in_pins(&c, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 31, false);
    pio_sm_set_consecutive_pindirs(pio, sm, pin+27, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, pin+15, 1, true);
    // Shifting to left matches the customary MSB-first ordering of SPI.
    sm_config_set_in_shift(
        &c,
        false, // Shift-to-right = false (i.e. shift to left)
        true,  // Autopush enabled
        31      // Autopush threshold = 1
    );
    // We only receive, so disable the TX FIFO to make the RX FIFO deeper.
    //sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_clkdiv(&c, 1);
    pio_sm_init(pio, sm, offset, &c);
}
void combined_program_init_2(PIO pio, uint sm, uint offset, uint pin, float div) {
    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = combined_program_get_default_config(offset);
    // initialize voltage pins
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+12);
    pio_gpio_init(pio, pin+11);
    sm_config_set_sideset_pins(&c, pin+12);
    sm_config_set_set_pins(&c, pin+11, 1);
    // voltage in pins
    sm_config_set_in_pins(&c, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 31, false);
    pio_sm_set_consecutive_pindirs(pio, sm, pin+11, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, pin+12, 1, true);
    // Shifting to left matches the customary MSB-first ordering of SPI.
    sm_config_set_in_shift(
        &c,
        false, // Shift-to-right = false (i.e. shift to left)
        true,  // Autopush enabled
        31      // Autopush threshold = 1
    );
    // We only receive, so disable the TX FIFO to make the RX FIFO deeper.
    //sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_clkdiv(&c, 1);
    pio_sm_init(pio, sm, offset, &c);
}

#endif
